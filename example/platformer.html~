<head>
<title>Simple muuAct platformer</title>
<script src="../src/muu2dbase.js"></script>
<script src="../src/muu2dshapes.js"></script>
<script src="../src/libs/Box2dWeb-2.1.a.3.min.js"></script>
<script src="../src/muu2dBox.js"></script>
</head>

<body>
<canvas id="fondo" width=800 height=600 style="position:absolute">
</canvas>
<canvas id="canvas" width=800 height=600 style="position:absolute">
</canvas>

<script>
function Actor(anims, size){
    this.anims = anims || {def:{sprite0:muu.getSprite("pau"), dt:0, len:1}};
  this.anim = this.anims.def;
  this._size = size || new v2(50,50);
  this._orientation = new v2(1,1);
  this.t = 0;
}
Actor.prototype = new muuNode();
Actor.prototype.constructor = Actor;

Actor.prototype.size = function(size, y){
    if(typeof size === "undefined")
        return this._size;
    else if(size instanceof v2) this._size = size;
    else this._size.x =size, this._size.y = y;
    return this;
}

Actor.prototype.addAnim = function(anim, name){
    this.anims[name] = anim
    return this;
}
Actor.prototype.getAnim = function(anim){
  return this.anims[anim]
}
Actor.prototype.setAnim = function(anim){
    this.anim = this.anims[anim];
    return this;
}

Actor.prototype.orientation = function(or){
    if(typeof or === "undefine") return this._orientation;
    else this._orientation.x = or.x, this._orientation.y = or.y;
}

Actor.prototype.paintTo = function(context){
	context.translate(this.getPos().x, this.getPos().y);
	context.rotate(this.rotation());
    context.scale(this._orientation.x, this._orientation.y);
    context.translate(-this.size().x/2, -this.size().y/2)
	context.scale(this.scale(), this.scale());
	this.anim.sprite0.paintTo(context, this.size());
	context.scale(1/this.scale(), 1/this.scale());
    context.translate(this.size().x/2, this.size().y/2)
    context.scale(this._orientation.x, this._orientation.y)
    context.rotate(-this.rotation());
	context.translate(-this.getPos().x, -this.getPos().y)
}
Actor.prototype.step = function(steps){
    this.t += steps || 1
    if (this.anim.len > 1 && this.t >= this.anim.dt || this.anims.rand){
        this.t=0,anims = {dt:this.anim.dt, rand:this.anim.rand, len:this.anim.len}
        for(var i=0; i<this.anim.len-1; i++)
          anims["sprite"+i] = this.anim["sprite"+(i+1)]
        anims["sprite"+(this.anim.len-1)] = this.anim.sprite0
        this.anim = anims;
    }
    return this;
}
Actor.prototype._defShape = Sprite.prototype._defShape;
</script>

<script>
(function(){
var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
window.requestAnimationFrame = requestAnimationFrame;
})();

resize = 1, world = new b2World(new b2Vec2(0,0.000001), false);
var left = right = up = contact = false, me;
document.addEventListener("keydown", function(key){
  var lor = new v2(1,1), ror = new v2(-1,1);
    switch(key.which){
      case 37: //Left
          if(!(left || right || up))me.setAnim("paso"); me.orientation(lor); left = true; break;
      case 38: //UP
          if(!(left || right || up))me.setAnim("paso"); up = true;  break;
      case 39: // Right
          if(!(left || right || up))me.setAnim("paso"); me.orientation(ror); right = true; break;
  }
});
document.addEventListener("keyup", function(key){
  switch(key.which){
      case 37: //Left
          left = false; me.physics().m_linearVelocity.x = 0;
          if(!(right || up))me.setAnim("standby");
          break;
      case 38: //UP
          up = false; if(!(left || right))me.setAnim("standby");
          break;
      case 39: // Right
          right = false; me.physics().m_linearVelocity.x = 0;
          if(!(left || up))me.setAnim("standby");
          break;
  }
});

window.onload = function(){
	muu.addAtlas("atlas.png", "atlas.js");
	var layer = muu.addCanvas("canvas", true);
    var fondo = muu.addCanvas("fondo", false);
    fondo.add(new Rect(800,600).fill("rgb(100, 200, 255)").moveTo(400,300));
    var floor1 = new Rect(200,10).fill("rgb(100,250,200)").moveTo(120, 505).physics()
    floor1.physics().SetType(b2Body.b2_staticBody);
    fondo.add(floor1)
    var floor2 = new Rect(500,10).fill("rgb(100,250,200)").moveTo(450, 475).physics()
    floor2.physics().SetType(b2Body.b2_staticBody);
    fondo.add(floor2)
    layer.add(new Circle(50).moveTo(450,100).physics() )

	muu.whenReady(function(){
    var fixture = new b2FixtureDef;
    fixture.density = 10;
    fixture.restitution = 0;
    fixture.friction = 0.5;
    fixture.shape = new b2PolygonShape()
    fixture.shape.SetAsBox(35,75);
    me = new Actor({standby:{sprite0:muu.getSprite("pau"), len:0, dt:0}}).moveTo(75,75).size(150,150).physics(fixture);
    me.addAnim({sprite0:muu.getSprite("pau"), sprite1:muu.getSprite("paupaso1"), sprite2:muu.getSprite("paupaso2"),
      len:3, dt:30}, "paso")
    me.setAnim("standby");
    me.physics().SetUserData({"me":true})
	layer.add(me);

    world.SetContactListener({BeginContact:function(cont){
      var userData = cont.GetFixtureA().GetBody().GetUserData();
      if(userData) if(userData.me) contact = true;
      userData = cont.GetFixtureB().GetBody().GetUserData();
      if(userData) if(userData.me) contact = true;

    }, EndContact:function(cont){
      var userData = cont.GetFixtureA().GetBody().GetUserData();
      if(userData) if(userData.me) contact = false;
      userData = cont.GetFixtureB().GetBody().GetUserData();
      if(userData) if(userData.me) contact = false;

    }, PreSolve:function(){}, PostSolve:function(){}})
    var lt; // Last time
    function render(t){
      var dt = lt ? t -lt : t;
      lt = t;
      if(contact && up)
          me.physics().m_linearVelocity.y = -0.015; //ApplyImpulse(new b2Vec2(0, -0.005), me.getPos());
      if(right) me.physics().m_linearVelocity.x = 0.005
      else if(left) me.physics().m_linearVelocity.x = -0.005
      
      for (var i=0; i<dt/100; i++){
        world.Step(100, 10, 10);
        me.physics().m_sweep.a = 0;
      //  world.ClearForces();
      }
      me.step(i);
      muu.render();
      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
    });
    fondo.render();
}
</script>
</body>
